@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@using Daemon.RazorUI.Animations
@using Microsoft.Extensions.Logging

@namespace Daemon.RazorUI.Modal

@inject ModalService _modalService
@inject ILogger<ModalContent> Logger

<div class="sm:flex sm:items-start">
    <div 
        class=@($@"
            mx-auto flex h-12 w-12 flex-shrink-0 
            items-center justify-center rounded-full 
            text-{Color} bg-red-100 sm:mx-0 sm:h-10 sm:w-10
        ")>
        @_icon
    </div>
    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
        <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">@Title</h3>
        <div class="mt-2">
            <p class="text-sm text-gray-500">@Description</p>
        </div>
    </div>
</div>
<div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
    <button 
        type="button" 
        class=@($"daemon-button bg-{Color}")
        @onclick=@(() => HandleConfirmation(true))
        disabled=@_isLoading
    >
        @if(_isLoading)
        {
            <Spinner Class=""/>
        } 
        else {
            <span>Delete</span>
        }
    </button>
    <button 
        type="button"
        class="daemon-button mr-4"
        @onclick=@(() => HandleConfirmation(false))
        disabled=@_isLoading
    >
        Cancel
    </button>
</div>

@code {

    [Parameter]
    public string? Color { get; set; }
    [Parameter]
    public Type? IconType { get; set; }
    private RenderFragment? _icon;
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? Description { get; set; }
    [Parameter]
    public EventCallback<bool> OnConfirm { get; set; } = EventCallback<bool>.Empty;


    private bool _isLoading = false;


    private async Task HandleConfirmation(bool confirmed)
    {
        Logger.LogWarning("Someone has clicked me!");
        _isLoading = true;
        await OnConfirm.InvokeAsync(confirmed);
        _isLoading = false;
    }

    protected override void OnInitialized()
    {
        InitIcon();
    }

    private void InitIcon()
    {
        if (IconType != null)
        {
            _icon = builder =>
                {
                    builder.OpenComponent(0, IconType);
                    if (Color != null)
                    {
                        builder.AddAttribute(1, "Class", $"text-{Color}");
                    }
                    builder.CloseComponent();
                };
        }
    }

}
